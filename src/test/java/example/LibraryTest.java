package example;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.*;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import static java.time.Duration.ofMillis;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@DisplayName("A special tests collection for junit and mockito")
class LibraryTest {
	static List answer;
    @BeforeAll
    static void initTestEnv() {
    	
    }

    @BeforeEach
    void initEveryMethod() {
    	answer = Arrays.asList("1","2","3","4");
    }

    @Test
    @DisplayName("isVaild should return 'false'")
    void testIsVaild() {
    	Library  classUnderTest = new Library();
        Assertions.assertFalse(classUnderTest.isVaild(Arrays.asList("1","2")));  
        Assertions.assertFalse(classUnderTest.isVaild(Arrays.asList("1","1","3")));
    }
    
    @Test
    @DisplayName("isVaild should return 'true'")
    void testIsVaild2() {
    	Library  classUnderTest = new Library();
        Assertions.assertFalse(classUnderTest.isVaild(Arrays.asList("1","2","3","4")));
    }
    
    @Test
    @DisplayName("countB")
    void countB() {
    	List input = Arrays.asList("1","3");
    	Library  classUnderTest = new Library();
    	assertEquals(2,classUnderTest.countB(answer,input) );
    }
    
    @Test
    @DisplayName("countA")
    void countA() {
    	List answer2 = Arrays.asList("1","2","3","4");
    	List input2 = Arrays.asList("1","3");
    	Library  classUnderTest = new Library();
    	int countA = classUnderTest.countA(answer2,input2);
    	assertEquals(1,countA );
    }
    
    @Test
    @DisplayName("result")
    void result() {
    	int countA =4;
    	int countB =0;
    	Library  classUnderTest = new Library();
    	String result = classUnderTest.result(countA,countB);
    	assertEquals("4A0B 胜利，一切正确",result );
    }
    

//    @Test
//    void testcountB() {
//        Assertions.assertFalse(classUnderTest.isVaild(Arrays.asList("1","2")));  
//    }
    
   
/**
 * 
 * @throws Exception

    @Test
    @SuppressWarnings("unchecked")
    void testMockClass() throws Exception {
        // you can mock concrete classes, not only interfaces
        LinkedList mockedList = mock(LinkedList.class);

        // stubbing appears before the actual execution
        String value = "first";
        when(mockedList.get(0)).thenReturn(value);

        Assertions.assertEquals(value, mockedList.get(0));
    }

    @Test
    @SuppressWarnings("unchecked")
    void test_mock_verify() {
        // mock creation
        List<String> mockedList = mock(List.class);
        // using mock object - it does not throw any "unexpected interaction" exception
        mockedList.add("one");
        mockedList.clear();
        // selective, explicit, highly readable verification
        verify(mockedList).add("one");
        verify(mockedList).clear();
    }

    @Test
    void groupedAssertions() {
        // In a grouped assertion all assertions are executed, and any
        // failures will be reported together.
        String firstName = "John";
        String lastName = "Doe";

        assertAll("person",
                () -> assertEquals("John", firstName),
                () -> assertEquals("Doe", lastName)
        );
    }

    @Test
    void exceptionTesting() {
        Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
            throw new IllegalArgumentException("a message");
        });
        Assertions.assertEquals("a message", exception.getMessage());
    }

    @Test
    @Disabled
    void timeoutExceeded() {
        // The following assertion fails with an error message similar to:
        // execution exceeded timeout of 10 ms by 91 ms
        assertTimeout(ofMillis(10), () -> {
            // Simulate task that takes more than 10 ms.
            Thread.sleep(100);
        });
    }
     */
}
